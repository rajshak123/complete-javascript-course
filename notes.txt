1.Hoisting works with only Function declaration and not Function expression.
2.Event Bubbling vs Event Capturing
    Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The event propagation mode determines in which order the elements receive the event.
    With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.
    With capturing, the event is first captured by the outermost element and propagated to the inner elements.
    Capturing is also called "trickling", which helps remember the propagation order:
    trickle down, bubble up

    Back in the old days, Netscape advocated event capturing, while Microsoft promoted event bubbling. Both are part of the W3C Document Object Model Events standard (2000).


    function log(msg) {
        logElement.innerHTML += ('<p>' + msg + '</p>');
    }

    function capture() {
        log('capture: ' + this.firstChild.nodeValue.trim());
    }

    function bubble() {
        log('bubble: ' + this.firstChild.nodeValue.trim());
    }

    var divs = document.getElementsByTagName('div');
    for (var i = 0; i < divs.length; i++) {
        divs[i].addEventListener('click', capture, true);
        divs[i].addEventListener('click', bubble, false);
    }
 


 3.Use case of IIFE in JS (https://blog.mariusschulz.com/2016/01/19/use-cases-for-javascripts-iifes)

 4. call,apply and bind
 5. JavaScript does not give scoping for block.It only gives scoping for the functions.So anything defined inside the block in global scope is available throughout the programs.Even though it has changed with ES6 where you can define block scoping using the "let" keyword.
 6. reduce is helpful in JS if we want to take an array and reduce it into a single value.
 7. Methods to be defined on object should be defined on prototype property rather than defining it in object declaration because it creates performance overhead.
 8. State that is often changed should be managed by the isolated component rather than being passed on by the parent component
    because it will lead to rendering of parent component a lot which will lead to performance overhead.
 9. debounce in lodash helps us in specifying how often a function is called.So it can help in like deciding
    how often a function should be called when entering input into text field like for validations.